package tierPSO;

import java.util.ArrayList;

public class App {
	private final static int MAX_TIERS = 1;
	private final static int NUM_OF_PARTICLES = 50;
	private final static int MAX_PARTICLES_PER_TIRE = (int) Math.floor(NUM_OF_PARTICLES/ 5);
	private final static int DIMENSIONS = 3;
	private final static int ITERATIONS = 50;
	private final static double TIER_INERTIA = 0.5;
	private final static double GlOBAL_INERTIA = 0.1;

	ArrayList<double[]> particleLocations = new ArrayList<double[]>();
	ArrayList<double[]> particlePBs = new ArrayList<double[]>(); // personal best for each particle

	ArrayList<Double> velocitiesOfLocations = new ArrayList<Double>();

	ArrayList<ArrayList<Integer>> tiers = new ArrayList<ArrayList<Integer>>(); 
	// contains indexs of particles in tier.
	public static void main(String[] args) {
		ArrayList<Integer> tier = new ArrayList<Integer>();
	    int i = 0;
	    for(int i; i < NUM_OF_PARTICLES; i++){
	        particleLocations.add(randomLocation);
	        tier.add(i);
	    }
	    tiers.add(tier);

	    for(int i = 0; i < ITERATIONS; i++){
	        double[] gbest = new double[DIMENSIONS];
	        double gbestCost = 0;
	        double[][] localAverages = new double[][];

	        for(int particle: NUM_OF_PARTICLES){
	            if(inTier(particle) == 0){
	                if(gbestCost == 0){
	                    gbest = particle;
	                    gbestCost = locationCost(particle);
	                } else {
	                    if(gbestCost < locationCost(particle)){
	                    gbest = particle;
	                    gbestCost = locationCost(particle);
	                    }
	                }
	            }
	        }

	        int k = 0
	        for(tier: tiers){
	            double[] tierAverage = new double[];
	            for(particleIndex:tier){
	                particle = particleLocations.get(particleIndex);
	                tierAverage = add(tierAverage, particle);
	                }
	            }
	            tierAverage = divide(tierAverage, NUM_OF_PARTICLES);
	            localAverages.add(tierAverage);
	            k++;
	        }

	        for(int j =0; j < NUM_OF_PARTICLES; j++){
	            updateLocation(j);
	        }
	    }
	}

}
